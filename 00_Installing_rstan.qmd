```{r setup, include=FALSE, message=FALSE, error=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      message = FALSE,
                      warning = FALSE,
                      cache = TRUE)

```

# Instalación de bibliotecas y software necesario para modelos de censo con enfoque bayesiano

## Paso 1: Instalación del software
A continuación se muestra una lista del software necesario para el correcto desarrollo de la formación. Se recomienda instalar estos paquetes antes de comenzar con el desarrollo práctico.


1. Descargue e instale **Rbase** (<https://cran.r-project.org/bin/windows/base/>)
2. Descargue e instale **Rtools** (<https://cran.r-project.org/bin/windows/Rtools/>)
3. Descargue e instale **Rstudio** (<https://posit.co/download/rstudio-desktop/>)
4. Descargue e instale **Quarto** (<https://quarto.org/docs/get-started/>)
5. Descargue e instale **Anaconda** (<https://www.anaconda.com/products/individual>)
6. Descargue e instale **Google Cloud** (<https://cloud.google.com/sdk/docs/install?hl=es-419>)


##  Paso 2: Instalar las siguientes bibliotecas en *R.*

### Visualización y manipulación de datos:

- **tidyverse** : una colección de paquetes para manipulación y visualización de datos.

- **magrittr** : proporciona un %>%operador de canalización para hacer que el código sea más legible.

- **scales** : herramientas para escalar visualizaciones, como ajustar las rupturas de eje.

- **sf** : Para trabajar con datos espaciales y mapas.
- **tmap** : Crea mapas temáticos y superposiciones.

### Modelos estadísticos:
- **lme4**: Se adapta a modelos lineales y lineales generalizados de efectos mixtos.
- **rstanarm**: Se adapta a modelos bayesianos utilizando Stan para diversas tareas estadísticas.

### Analisis de encuestas:
- **srvyr**: Herramientas para trabajar con datos de encuestas junto con el paquete `dplyr`.
- **survey**: Para analizar datos de encuestas complejos.

###  Manipulación y Transformación de Datos:
- **dplyr**: Herramientas de manipulación de datos.
- **tidyr**: Herramientas para remodelar y ordenar datos.
- **reshape2**:  Reordenar de marcos de datos..

### Análisis Bayesiano:
- **bayesplot**: Visualización de modelos bayesianos.
- **posterior**: Herramientas para trabajar con distribuciones posteriores.
- **rstan**: Interfaz *R* para `Stan`, una plataforma para modelado bayesiano.

### Geospatial Analysis:
- **rgee**: Interfaz para Google Earth Engine.
- **trafo**: Herramientas para transformar datos espaciales.
- **maptools**: Herramientas de lectura y manipulación de datos geográficos.
- **usmap**: Mapas de Estados Unidos.

### Misceláneas:
- **sampling**: Herramientas para muestreo de encuestas.
- **haven**: Para leer y escribir archivos SPSS, Stata y SAS.
- **RColorBrewer**: Proporciona paletas de colores.
- **kableExtra**: Mejora la representación de tablas en R Markdown.
- **formatR**: Herramientas de formato para código R.
- **printr**:  Impresión personalizada de marcos de datos y tablas.
- **remotes**: Herramientas para el desarrollo e instalación de paquetes.
- **latex2exp**: Convierte código LaTeX en expresiones.



Para instalar cada paquete, use el comando `install.packages("package_name")`.

```{r, eval=FALSE}
install.packages("patchwork")
install.packages("lme4")
install.packages("tidyverse")
install.packages("rstanarm")
install.packages("magrittr")
install.packages("reticulate") 
install.packages("rgee") 
install.packages("sf")
install.packages("tmap")
install.packages("trafo")
install.packages("scales")
install.packages("srvyr")
install.packages("survey")
install.packages("haven")
install.packages("sampling")
install.packages("RColorBrewer")
install.packages("maptools")
install.packages("data.table")
install.packages("forcats")
install.packages("tidyr")
install.packages("reshape2")
install.packages("bayesplot")
install.packages("posterior")
install.packages("gridExtra")
install.packages("ggalt")
install.packages("usmap")
install.packages("kableExtra")
install.packages("formatR")
install.packages("printr")
install.packages("remotes")
install.packages("latex2exp")
install.packages("gtsummary")
```

###  Guía paso a paso para instalar `rstan`

Siga estos pasos para instalar el paquete `rstan`:

1. Instale *Rtools* (si usa Windows):
   - Descargue e instale Rtools.

2. instalar `StanHeaders`:
   - Abrir `R` o `RStudio`.
   - Ejecute el comando: `install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))`.

3. Instalar `rstan`:
   - Ejecute el comando: `install.packages("rstan", repos=c("https://mc-stan.org/r-packages/", getOption("repos")))`.

4. Verifique la instalación de la librería
   - Cargue la librería usando: `library(rstan)`.

5. Validación de la instalación:
   - Ejecute un modelo simple para asegurarse de que rstan funcione correctamente. Puede utilizar el código de ejemplo proporcionado en la documentación.
   
Recuerde seguir estos pasos cuidadosamente para garantizar una instalación exitosa `rstan` y sus dependencias.


## Paso 3: Validación de la instalación: garantizar una instalación adecuada de `rstan`

En esta sección, validamos la instalación correcta de `rstan` ejecutando un modelo bayesiano simple. Cargamos los paquetes necesarios, incluidos `rstan`, `posterior` y `bayesplot`. Luego definimos un modelo Stan básico usando el código Stan proporcionado. Ajustamos este modelo usando `stan()` con una pequeña cantidad de iteraciones (`iter = 10`) para verificar rápidamente la instalación.

A continuación, demostramos cómo ajustar aún más el modelo (`fit2`) con más iteraciones (`iter = 10000`) para mostrar cómo realizar un análisis más completo. El resumen del modelo ajustado se imprime utilizando la función `summary()`.

Asegúrese de evaluar este código en un entorno R después de instalar los paquetes necesarios para verificar que `rstan` se haya instalado correctamente y funcione como se esperaba.

```{r,eval=FALSE}
library(rstan)
library(posterior)
library(bayesplot)

# Example Stan code
stan_code <- "
parameters {
  real y[2]; 
} 
model {
  y[1] ~ normal(0, 1);
  y[2] ~ double_exponential(0, 2);
} 
"
# Fit the model
fit1 <- stan(model_code = stan_code, iter = 10, verbose = FALSE) 

# Print the fit1 object
print(fit1)

# Further fitting and summarizing
fit2 <- stan(fit = fit1, iter = 10000, verbose = FALSE) 
summary(fit2)$summary 
```



## Paso 4: Crear una cuenta de Google Earth Engine:

<https://developers.google.com/earth-engine/datasets/>

Después de crear exitosamente su cuenta, es importante seguir estos pasos para asegurarse de que todo esté configurado correctamente:

1. Acceda al enlace proporcionado:

<https://developers.google.com/earth-engine/datasets/catalog/WHRC_biomass_tropical>.

2. Desplácese hasta el final de la página y localice el código que se muestra en la imagen a continuación:


```{r,echo=FALSE}
knitr::include_graphics("Recursos/00_Instalar_rstan/Validar cuenta.png")
```

3. Haga clic en la opción  **Open in Code Editor**, que abrirá una nueva pestaña del navegador. Siga las instrucciones proporcionadas hasta lograr el resultado que se muestra en la imagen a continuación:

```{r,echo=FALSE}
knitr::include_graphics("Recursos/00_Instalar_rstan/Validar cuenta2.png")
```

4. En la pestaña anterior, busque y haga clic en el botón **Run** para obtener el resultado que se muestra en la imagen a continuación:

```{r,echo=FALSE}
knitr::include_graphics("Recursos/00_Instalar_rstan/Validar cuenta3.png")
```

**Nota**: Repita el proceso según sea necesario para asegurarse de lograr el resultado deseado.