```{r setup, include=FALSE, message=FALSE, error=FALSE, warning=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  cache = TRUE)
library(kableExtra)
library(tidyverse)
library(magrittr)
rstan::rstan_options(auto_write = TRUE) # speed up running time 
# Clear the workspace by removing all variables
rm(list = ls())
tba <- function(dat, cap = NA){
  kable(dat,
      format = "html", digits =  4,
      caption = cap) %>% 
     kable_styling(bootstrap_options = "striped", full_width = F)%>%
         kable_classic(full_width = F, html_font = "Arial Narrow")
}
```

# Modelo binomial de unidad para viviendas ocupadas

En primera instancia, se definió un modelo estadístico para predecir la probabilidad de que una vivienda esté ocupada. Debido a un número significativo de viviendas en el censo que nunca respondieron a las llamadas de encuesta, se negaron a ser entrevistadas o simplemente no fueron localizables, fue necesario asignar una probabilidad de ocupación a estas viviendas. El modelo utilizado fue un modelo mixto bayesiano con una respuesta binomial y efectos aleatorios para provincias, cantones y distritos, como se detalla a continuación:

- $U_{ij}$ es una variable dicotómica que indica el estado de ocupación de la $i$-ésima vivienda en la $j$-ésima área geográfica.

- $p_{ij}$ es la probabilidad de que la $i$-ésima vivienda en la $j$-ésima área geográfica esté ocupada.

- $x_{ij}^\prime \beta$ representa los efectos fijos considerados en el modelo que influyen en la probabilidad de ocupación.

- $z_{ij}^\prime \gamma$ representa los efectos aleatorios que también influyen en la probabilidad de ocupación.

- Utilizamos la función logit para relacionar estas probabilidades y efectos, según la ecuación $\text{logit}(p_{ij}) = x_{ij}^\prime \beta + z_{ij}^\prime \gamma$.

Para obtener resultados más precisos, se implementaron distribuciones a priori no informativas para los parámetros del modelo bayesiano. El resultado final proporciona una estimación del número de viviendas desocupadas en diferentes subdivisiones geográficas del país.

## Preparación del entorno y los datos

En el siguiente bloque de código, iniciamos el proceso preparando nuestro entorno de R. Esto implica limpiar el espacio de trabajo para eliminar cualquier variable existente y cargar las bibliotecas necesarias para la manipulación de datos, visualización y análisis estadístico. Utilizamos bibliotecas como 'tidyverse' para la manipulación y visualización de datos, 'data.table' para la manipulación eficiente de datos, 'openxlsx' para leer archivos de Excel, 'magrittr' para la manipulación de datos utilizando operadores de tuberías, 'lme4' para ajustar modelos lineales mixtos, 'rstan' para el análisis bayesiano de datos utilizando Stan y 'rstanarm' para ajustar modelos de regresión bayesianos. Además, definimos la función 'select' de la paquetería 'dplyr' para la selección de columnas.

Después de configurar el entorno, procedemos a leer los datos del censo. Leemos la información del censo desde el archivo 'censo_viviendas.rds' y extraemos columnas específicas relevantes para nuestro análisis, incluyendo 'un_ID' y 'Filtros'. De manera similar, leemos los covariables UGM estandarizados del archivo 'Base_ugms_estandarizada.rds'. Estos pasos iniciales sientan las bases para nuestro posterior análisis de datos y modelado.

```{r, eval=FALSE}
# Load required libraries
library(tidyverse)  # For data manipulation and visualization
library(data.table)  # For efficient data manipulation
library(openxlsx)  # For reading Excel files
library(magrittr)  # For data manipulation using pipe operators
library(lme4)  # For fitting linear mixed-effects models
library(rstan)  # For Bayesian data analysis using Stan
library(rstanarm)  # For fitting Bayesian regression models
select <-
  dplyr::select  # Define the 'select' function from dplyr package
cat("\f")  # Clear the console

## Reading census data.
# Read census data from the 'censo_viviendas.rds' file and select specific columns
censo_vivienda <- readRDS("Recursos/04_Model_binomial/Data/censo_viviendas.rds") %>%
  select(un_ID:Filtros)

Covariables_UGM <- readRDS("Recursos/04_Model_binomial/Data/Base_ugms_estandarizada.rds")
# Read UGM covariates from the 'Base_ugms_estandarizada.rds' file
```

## Definición de la columna 'Desocupada': Clasificación del estado de ocupación

Esta sección se centra en definir la columna 'Desocupada' en los datos del censo, la cual indica si una vivienda está desocupada. Los valores se determinan en función de condiciones específicas derivadas de las columnas 'greenpoint2' y 'Filtros', así como del número de individuos que viven en la vivienda. El proceso de clasificación es esencial para análisis y modelado posteriores.

```{r, eval=FALSE}
# Define the 'Desocupada' column based on specific conditions
censo_vivienda %<>% mutate(
  Desocupada = case_when(
    greenpoint2 == "Censado con informacion n=0" ~ 1,
    greenpoint2 == "Censado con informacion n>0" ~ 0,
    greenpoint2 == "Sin informacion pero  n>0" ~ 0,
    Filtros == "Censado en papel" & H01A_TOTAL_PERSONAS > 0 ~ 0,
    Filtros == "Censado en papel" & H01A_TOTAL_PERSONAS == 0 ~ 1,
    greenpoint2 == "Sin informacion pero n>=0" ~ NA_real_
  )
)

```

### Conteo de Combinaciones de Estado de Ocupación y Valores de 'Greenpoint'

En esta sección, realizamos una agregación de datos para calcular el conteo de varias combinaciones de estado de ocupación y valores de 'greenpoint2'. Al agrupar los datos en función de estas variables, podemos observar la distribución de patrones de ocupación de viviendas y las categorías de 'greenpoint' correspondientes. El resumen resultante, que incluye los conteos, se guarda en un archivo para referencia y análisis posterior.


```{r, eval=FALSE}
# Grouping and summarizing to get counts for different combinations

conteos <- censo_vivienda %>% 
  group_by(greenpoint2, Desocupada) %>% 
  summarise(total = n(), .groups = "drop")
conteos
```


```{r, eval=TRUE, echo=FALSE}
readRDS("Recursos/04_Model_binomial/RecurseBooks/conteos.rds") %>% 
  tba()
```


```{r, eval=FALSE}
# Grouping and summarizing data to create a binomial model base dataset
base_conteo_viviendas <- censo_vivienda %>% group_by(UGM_ID) %>%
  summarise(
    Desocupadas = sum(Desocupada, na.rm = TRUE),
    Ocupadas = sum(1 - Desocupada, na.rm = TRUE),
    n_vivienda = n()
  )
base_conteo_viviendas
```


```{r, echo=FALSE}
readRDS("Recursos/04_Model_binomial/RecurseBooks/base_conteo_viviendas.rds") %>% 
  head(10) %>% tba()
```

-  Resumir las columnas numéricas en 'base_conteo_viviendas' y guardar los resultados

```{r, eval=TRUE}
readRDS("Recursos/04_Model_binomial/RecurseBooks/base_conteo2.rds") %>% 
  tba()
```

-   Realizar una unión del conjunto de datos del modelo binomial con las covariables estandarizadas.

```{r, eval = FALSE}
base_conteo_viviendas <- inner_join(base_conteo_viviendas,
                                    Covariables_UGM, by = "UGM_ID")
```

El código proporcionado incluye las siguientes opciones:

1. `options(mc.cores = parallel::detectCores())`:
   Esta opción establece el número de núcleos utilizados para cálculos en paralelo en modelos Stan. La función `parallel::detectCores()` detecta automáticamente el número de núcleos de CPU disponibles en su máquina. Al configurar el número de núcleos, puede aprovechar el procesamiento en paralelo para acelerar el proceso de estimación del modelo Stan.

2. `rstan::rstan_options(auto_write = TRUE)`:
   Esta opción está relacionada con la escritura de modelos Stan compilados en el disco para fines de almacenamiento en caché. Cuando `auto_write` se establece en `TRUE`, indica que los modelos Stan compilados deben guardarse automáticamente en el disco para acelerar el proceso de compilación en ejecuciones futuras. Esto puede mejorar el tiempo de ejecución del modelo, especialmente si ejecuta el mismo modelo varias veces.

Ambas opciones contribuyen a mejorar la eficiencia y la velocidad de ajuste de modelos Stan mediante el uso de procesamiento en paralelo y el almacenamiento en caché de modelos compilados.


```{r, eval = FALSE}
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE) # Speed up running time 

modelo_binomial <- stan_glmer(
  cbind(Desocupadas, Ocupadas) ~ 1 +
    (1 | PROV_ID) +
    (1 | CANT_ID) +
    (1 | DIST_ID) +
     ugm_peligrosidad +                        
     ugm_problema_de_acceso +                  
     ugm_riesgos_amenazas +                    
     ugm_cobertura_telecomunicaciones +        
     dist_permisos_de_construccion_2011_2022 + 
     dist_poblacion_proyeccion_ajustada_2022 + 
     dist_poblacion_ccss_abril_2023 +          
     dist_matricula_educacion_primaria_2021 +  
     dist_codigo_urbanidad +                   
     GHS_BUILT_S_E2020_GLOBE_R2023A_5367_CRI + 
     urban_coverfraction +                     
     crops_coverfraction +                     
     asent +                                   
     ppp_CRI_v2 +                              
     elev +                                    
     indig +                                   
     aprot +  
     ebais_tt +                                
     escu_tt +                                 
     igl_tt +                                  
     dist_nl_mean 
  ,
  data = base_conteo_viviendas,
  family = binomial(link = "logit"),
  iter = 15000,            # total number of iterations per chain
  cores = 4, 
)

saveRDS(object = modelo_binomial, 
        file = "Recursos/04_Model_binomial/Data/Binomial_bayes_vivienda_desocupadas.rds")

```
