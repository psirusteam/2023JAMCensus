```{r setup, include=FALSE, message=FALSE, error=FALSE, warning=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  cache = TRUE)
library(kableExtra)
library(tidyverse)
library(magrittr)
### Cleaning R environment ###
rm(list = ls())
rstan::rstan_options(auto_write = TRUE) # speed up running time 
tba <- function(dat, cap = NA){
  kable(dat,
      format = "html", digits =  4,
      caption = cap) %>% 
     kable_styling(bootstrap_options = "striped", full_width = F)%>%
         kable_classic(full_width = F, html_font = "Arial Narrow")
}
```



# Estimaciones Agregadas

En esta sección, ilustramos la metodología empleada para obtener estimaciones en varios niveles de agregación, utilizando un conjunto de funciones personalizadas adaptadas a este conjunto de datos específico. Estas funciones facilitan el proceso de generar predicciones y visualizaciones, lo que nos permite analizar de manera efectiva las estimaciones de población.


```{r}


### Libraries ###

library(tidyverse)
library(data.table)
library(openxlsx)
library(magrittr)
library(lme4)
library(rstan)
library(rstanarm)
source("Recursos/07_Resultados/Rcodes/01_Agregados.R")
cat("\f")
```
- **plot_densidad**: Esta función gráfica la densidad de una distribución normal con una media y desviación estándar especificadas. Además, resalta un intervalo específico de la distribución con un área sombreada y segmentos en el gráfico.

- **Pred_desocupado**: Esta función realiza cálculos y visualizaciones relacionados con los datos de desempleo en un censo.

- **Pred_totPob**: Esta función realiza cálculos y visualizaciones relacionados con los datos de población total en un censo.

- **plot_piramide_pob**: Genera un gráfico de pirámide de población con barras e intervalos de confianza.

- **piramide_pob**: Calcula y visualiza la pirámide de población a partir de los datos del censo.


### Leyendo la base del censo

```{r}
censo_vivienda <- readRDS("Recursos/07_Resultados/Data/05_censo_vivienda_personas_grupo_edad.rds")
```

## Predicción del porcentaje de viviendas desocupadas

```{r}
p1 <-  Pred_desocupado(censo_vivienda,
                agrega = NULL,
                Plot = TRUE,
                filtro = NULL) 
tba(p1)
```


```{r}
Pred_desocupado(censo_vivienda, agrega = "PROV_ID") %>% tba()
```


```{r}
Pred_desocupado(censo_vivienda, agrega = "CANT_ID") %>% 
  head(20) %>% tba()
```


```{r}
Pred_desocupado(censo_vivienda, agrega = "DIST_ID") %>% 
  head(10) %>% tba()
```


```{r}
p1 <- Pred_desocupado(censo_vivienda,
                agrega = "DIST_ID",
                Plot = TRUE,
                filtro = "10101")
tba(p1)
```

## Predicción del total de personas

```{r}
## National level result

p1 <- Pred_totPob(censo_vivienda,
                     agrega = NULL,
                     Plot = TRUE)

tba(p1)  
```


```{r}
## Provincial level result

Pred_totPob(censo_vivienda,
                     agrega = "PROV_ID",
                     Plot = FALSE) %>% 
  tba()
```


```{r}
p1 <- Pred_totPob(censo_vivienda,
                     agrega = "PROV_ID",
                     filtro = "1",
                     Plot = TRUE)

tba(p1)
```


```{r}
## Canton level result

Pred_totPob(censo_vivienda,
                     agrega = "CANT_ID",
                     Plot = FALSE,
                     filtro = NULL) %>% 
head(10)  %>% tba()
```


```{r}
## District level result
p1 <- Pred_totPob(censo_vivienda,
                     agrega = "DIST_ID",
                     Plot = TRUE,
                     filtro = "10110")
tba(p1)
```

## Predicción del total de personas por rango de edad y sexo

```{r}
piramide_pob(
  censo = censo_vivienda,
  Plot = FALSE,
  agrega = NULL,
  filtro = NULL
) %>% tba()
```


```{r}
p1 <- piramide_pob(
  censo = censo_vivienda,
  Plot = TRUE,
  agrega = NULL,
  filtro = NULL)
```


```{r,eval=FALSE}
p1 <- piramide_pob(
  censo = censo_vivienda,
  Plot = FALSE,
  agrega = "PROV_ID",
  filtro = NULL
)
```


```{r}
p1 <- piramide_pob(
  censo = censo_vivienda,
  Plot = TRUE,
  agrega = "PROV_ID",
  filtro = "1"
)
```


```{r}
p1<- piramide_pob(
  censo = censo_vivienda,
  Plot = TRUE,
  agrega = "PROV_ID",
  filtro = "2"
)
```


```{r}
p1 <- piramide_pob(
  censo = censo_vivienda,
  Plot = TRUE,
  agrega = "CANT_ID",
  filtro = "101"
)
```


```{r}
p1<- piramide_pob(
  censo = censo_vivienda,
  Plot = TRUE,
  agrega = "CANT_ID",
  filtro = "102"
)
```

